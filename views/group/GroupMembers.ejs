  <div class="modal fade" id="addmember" role="dialog" aria-labelledby="gridSystemModalLabel">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title" id="gridSystemModalLabel">Add member to group</h4>
        </div>
        <div class="modal-body">
          <p>You can add group members by uid or email address with the seperate of ';', for example: gang-layner.wang@nokia.com; 
          <p>
          <div id="add_member_alert" class="alert alert-danger hidden" role="alert">
            <dl>
            </dl>
          </div>
          <textarea id="member_list" class="form-control" rows="8"></textarea>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          <button type="button" id="add_member_btn" class="btn btn-primary">Save changes</button>
        </div>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->

  <div class="modal fade" id="importMemberCSV" role="dialog" aria-labelledby="gridSystemModalLabel">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title" id="gridSystemModalLabel">Import member list to group</h4>
        </div>
        <form id="upload_member_CSV_form" method="POST" role="form" enctype="multipart/form-data">
          <div class="modal-body">
            <p>You can add group members list by excel file.
            <div class="form-group">
              <label for="memberCSV">File Input</label>
              <input id="memberCSV" type="file" name="memberCSVFile">
              <p class="help-block">The file shall be in xlsx/xls format</p>
              <div id="add_member_CSV_alert" class="alert alert-danger hidden" role="alert">
               <dl>
               </dl>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <button type="button" id="insert_member_CSV_btn" class="btn btn-primary">Import</button>
          </div>
      </form>
      </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
  </div><!-- /.modal -->
  
  <div class="repeater" id="myRepeater">
    <div class="repeater-header">
      <div class="repeater-header-left">
        <span class="repeater-title">Group Members</span>
        <div class="repeater-search">
          <div class="search input-group">
            <input id="repeaterSearchContent" type="search" class="form-control" placeholder="Search"/>
            <span class="input-group-btn">
              <button id="repeaterSearch" class="btn btn-default" type="button">
                <span class="glyphicon glyphicon-search"></span>
                <span class="sr-only">Search</span>
              </button>
            </span>
          </div>
        </div>
      </div>
      <div class="repeater-header-right">
        <button type="button" class="btn btn-success btn-sm" data-toggle="modal" data-target="#addmember">Add Member</button>
        <button type="button" class="btn btn-success btn-sm" data-toggle="modal" data-target="#importMemberCSV">Insert Member List</button>
        <a id="test" onclick="clickDownload(this)" download="group_user_list.csv" href="#"><button type="button" class="btn btn-success btn-sm">Export Member</button></a>
        
      </div>
    </div>
    <div class="repeater-viewport">
      <div class="repeater-canvas"></div>
      <div class="loader repeater-loader"></div>
    </div>
    <div class="repeater-footer">
      <div class="repeater-footer-left">
        <div class="repeater-itemization">
          <span><span class="repeater-start"></span> - <span class="repeater-end"></span> of <span class="repeater-count"></span> items</span>
          <div class="btn-group selectlist" data-resize="auto">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
              <span class="selected-label">&nbsp;</span>
              <span class="caret"></span>
              <span class="sr-only">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu" role="menu">
              <li data-value="5"><a href="#">5</a></li>
              <li data-value="10" data-selected="true"><a href="#">10</a></li>
              <li data-value="20"><a href="#">20</a></li>
              <li data-value="50" data-foo="bar" data-fizz="buzz"><a href="#">50</a></li>
              <li data-value="100"><a href="#">100</a></li>
            </ul>
            <input class="hidden hidden-field" name="itemsPerPage" readonly="readonly" aria-hidden="true" type="text"/>
          </div>
          <span>Per Page</span>
        </div>
      </div>
      <div class="repeater-footer-right">
        <div class="repeater-pagination">
          <button type="button" class="btn btn-default btn-sm repeater-prev">
            <span class="glyphicon glyphicon-chevron-left"></span>
            <span class="sr-only">Previous Page</span>
          </button>
          <label class="page-label" id="myPageLabel">Page</label>
          <div class="repeater-primaryPaging active">
            <div class="input-group input-append dropdown combobox">
              <input type="text" class="form-control" aria-labelledby="myPageLabel">
              <div class="input-group-btn">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                  <span class="caret"></span>
                  <span class="sr-only">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-right"></ul>
              </div>
            </div>
          </div>
          <input type="text" class="form-control repeater-secondaryPaging" aria-labelledby="myPageLabel">
          <span>of <span class="repeater-pages"></span></span>
          <button type="button" class="btn btn-default btn-sm repeater-next">
            <span class="glyphicon glyphicon-chevron-right"></span>
            <span class="sr-only">Next Page</span>
          </button>
        </div>
      </div>
    </div>
  </div>

  <script type="text/javascript">

    var originalItems;

    function clickDownload(aLink){
            
      var items_arr = [];

      for(var i=0; i<originalItems.length; i++){
        item_prop = [];
        item_prop.push(originalItems[i].id);
        item_prop.push(originalItems[i].fullname);
        item_prop.push(originalItems[i].uid);
        item_prop.push(originalItems[i].email);
        items_arr.push(item_prop.join(','));
      }

      var result= items_arr.join('\n');  
      result =  encodeURIComponent(result);  
      aLink.href = 'data:text/csv;charset=utf-8,'+result;  

    }

    require(['common/add_group_member_in_batch']);

    require(['jquery','fuelux', 'underscore'], function($){

      $(function() {

        var dataFilter = function dataFilter(options) {

          console.log('data filter');
          
          var searchTerm, items;
          if (options.search) {
            searchTerm = new RegExp(options.search, 'i');//Explicitly make a regex object instead of just using String.search() to avoid confusion with FuelUX search() and options.search
            items = _.filter(originalItems, function (item) {
              var itemText = _.reduce(_.values(_.omit(item, 'createdAt', 'updatedAt', 'userfd')), function (finalText, currentText) {
                return finalText + " " + currentText;
              });
              var isSearchMatch = searchTerm.test(itemText);
              return isSearchMatch;
            });
            return items;
          }else{
            console.log('length of originalItems:', originalItems.length);
            return originalItems;
          }
        };

        // define the columns in your datasource
        var columns = [
          {
            label: 'ID',
            property: 'id',
            sortable: true
          },
          {
            label: 'Name',
            property: 'fullname',
            sortable: true
          },
          {
            label: 'Uid',
            property: 'uid',
            sortable: true
          },
          {
            label: 'Email',
            property: 'email',
            sortable: true
          },
        ];
        
        // this example uses an API to fetch its datasource.
        // the API handles filtering, sorting, searching, etc.
        function customDataSource(options, callback) {

          var dataItems = dataFilter(options);
          var pageIndex = options.pageIndex;
          var pageSize = options.pageSize;

          var options = {
            pageIndex: pageIndex,
            pageSize: pageSize,
            sortDirection: options.sortDirection,
            sortBy: options.sortProperty,
            filterBy: options.filter.value || '',
            searchBy: options.search || ''
          };

          var totalItems = dataItems.length;
          var totalPages = Math.ceil(totalItems / pageSize);
          var startIndex = (pageIndex * pageSize) + 1;
          var endIndex = (startIndex + pageSize) - 1;

          if(endIndex > dataItems.length) {
            endIndex = dataItems.length;
          }

          var rows = dataItems.slice(startIndex - 1, endIndex);

          // configure datasource
          var dataSource = {
            page: pageIndex,
            pages: totalPages,
            count: totalItems,
            start: startIndex,
            end: endIndex,
            columns: columns,
            items: rows
          };

          // invoke callback to render repeater
          callback(dataSource);

        }

        

        $.ajax({
            type: 'get',
            url: '/group/'+ $('#groupID').val()+'/getmembersinjson',
          })
          .done(function(data) {
            originalItems = data.users;
            // initialize the repeater
            var repeater = $('#myRepeater');
            repeater.repeater({
              list_selectable: false, // (single | multi)
              list_noItemsHTML: 'nothing to see here... move along',
              dataSource: customDataSource,
              dataSourceOptions:{pageSize:10}
            });
        });

        mediator.register('updateGroupMember', function(numOfEvents){

          console.log('Group Member updated');

          if($('#myRepeater').length===1){
            $.ajax({
                type: 'get',
                url: '/group/'+ $('#groupID').val()+'/getmembersinjson',
              })
              .done(function(data) {
                originalItems = data.users;
                $('#repeaterSearchContent').val('');
                $('#repeaterSearch').click();
                // initialize the repeater
                
            });
          }
        });

      });
          
    });
  </script>
  