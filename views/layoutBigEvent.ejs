<!DOCTYPE html>
<html>
  <head>
    <title><%= title||'Beehive in Nokia' %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built- in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <link rel="stylesheet" href="/vender/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/vender/bootstrap/dist/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/vender/dropzone/dist/min/basic.min.css">
    <link rel="stylesheet" href="/vender/dropzone/dist/min/dropzone.min.css">
    
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/animate.css">
    <link rel="stylesheet" href="/styles/beehive.css">
    <link rel="stylesheet" href="/styles/comments.css">
    <link rel="stylesheet" href="/styles/homePage.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/jcrop/jquery.Jcrop.css">
    <link rel="stylesheet" href="/styles/jcrop/jquery.Jcrop.min.css">
    <link rel="stylesheet" href="/styles/kindeditor/default/default.css">
    <link rel="stylesheet" href="/styles/kindeditor/readonly/readonly.css">
    <link rel="stylesheet" href="/styles/pickmeup/pickmeup.css">
    <link rel="stylesheet" href="/styles/pickmeup/pickmeup.min.css">
    <link rel="stylesheet" href="/styles/questionnaire.css">
    <link rel="stylesheet" href="/styles/sidebar.css">
    <link rel="stylesheet" href="/styles/test.css">
    <link rel="stylesheet" href="/styles/testproduction.css">
    <!--STYLES END-->
    <script type="text/javascript" src="/js/requirejs/require.min.js"></script>
    <script type="text/javascript" src="/js/config.js?39f84701"></script>
    
    <style>
      body {
          background-image: url("/images/bigevent.jpg");
          background-color: #cccccc;
      }

      h1,h2{
          color: #ffffff;
      }

      h2{
          margin-top: 2px; 
      }

      h5{
          color: #4CAF88;
      }

      p{
          color: #000000;
      }

      .projectLogo{
        height:150px !important;
        width:150px !important
      }


    </style>

  </head>

  <body >
    <% include component/navbar %>
    <div class="row">
      <div class="col-sm-6">
        <h1>HangZhou TC</h1>
        <h2>Excellence Congress 2016</h2>
        <h5>May.16 ~ May. 20</h5>
      </div>
    </div>
    <div style="margin-top:80px">
      <%- body %>
    </div>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
  </body>
</html>
<script type="text/javascript">

Events = [

{
  projectName: 'Testing Excellence',
  projectSlogon: 'Testing is a “Dialog” and happening in anytime and anywhere',
  projectImage: 'test.bmp'
},

{
  projectName: 'Testing Excellence',
  projectSlogon: 'Testing is a “Dialog” and happening in anytime and anywhere',
  projectImage: 'test.bmp'
},

{
  projectName: 'Testing Excellence',
  projectSlogon: 'Testing is a “Dialog” and happening in anytime and anywhere',
  projectImage: 'test.bmp'
}

]


</script>
