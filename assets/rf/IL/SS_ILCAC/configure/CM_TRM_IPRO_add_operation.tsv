*Setting*							
Suite Setup	Connect to target hardware and reserve test resource						
Suite Teardown	Release test resource and disconnect from target hardware						
Force Tags	Product_Backlog_ID-B01178	Iteration_ID-I00369	owner-I_EXT_NWS_WCDMA_RA_RI_HZSWD_LITE_FLASH@internal.nsn.com	element-IL	exec_type-automatic	exec_level-pre	type-FUT
...	hw_env-RNC_S0	hw_env-RNC	HW_TYPE-BCN_A1	BCN_STEP-BCN_S0	QL-5
...	ATC_ID-CAC_VLAN.FUT.001.AT.I01348	release-RU50					
Resource	il.html						
Resource	../resources/common_operation_resource.html						
Library	../resources/IP_based_route_resource.py						
							
*Variable*							
${IPBR_ID_4080}	4080						
${IPBR_ID_4081}	4081						
${IPBR_ID_4082}	4082						
${TEST_IP_ADDR_1}	192.168.1.21						
${TEST_IP_ADDR_2}	192.168.1.22						
${OWNER_NAME_1}	/QNUP-0						
${OWNER_NAME_2}	/QNUP-1						
${INVALID_OWNER}	/NOTEXIST						
${VRF_NAME}	vrf123						
${IFACE_NAME}	lo						
${TEST_BASE_IPBR_1}	ipbr_id=${IPBR_ID_4080} route_bw=10000 commit_bw=10000 commit_sig_bw=0 commit_dcn_bw=0 scheduler_type=virtualQueue						
${TEST_BASE_IPBR_2}	ipbr_id=${IPBR_ID_4081} route_bw=10000 commit_bw=10000 commit_sig_bw=0 commit_dcn_bw=0						
${NORMAL_IPRO_ATTRIBUTES}	ipbr_id=${IPBR_ID_4080} iface=${IFACE_NAME} owner=${OWNER_NAME_1} ip_address=${TEST_IP_ADDR_1}						
${IPRO_ATTRIBUTES_FOR_TEST}	ipbr_id=${IPBR_ID_4081} iface=${IFACE_NAME} owner=${OWNER_NAME_2} ip_address=${TEST_IP_ADDR_2}						
${NONE_EXSIT_VRF}	${IPRO_ATTRIBUTES_FOR_TEST} phb_set=EF,AF4,AF3,AF2 vrf=vrf123						
${IPBR_ID_NOT_EXIST}	iface=${IFACE_NAME} owner=${OWNER_NAME_1} ip_address=${TEST_IP_ADDR_1} ipbr_id=${IPBR_ID_4082}						
${INVALID_OWNER_RG_NAME}	iface=${IFACE_NAME} owner=/NOTEXIST ip_address=${TEST_IP_ADDR_1} ipbr_id=${IPBR_ID_4081}						
${PHB_SET_IS_NOT_CONTINOUS}	${IPRO_ATTRIBUTES_FOR_TEST} phb_set=EF,AF4,AF2						
${PHB_SET_DO_NOT_CONTAIN_BE}	${IPRO_ATTRIBUTES_FOR_TEST} phb_set=AF2,AF1						
${PHB_SET_HAS_DUPLICATE_VALUE}	${IPRO_ATTRIBUTES_FOR_TEST} phb_set=EF,AF4,AF4						
${PHB_SET_HAS_INVALID_VALUE_BF}	${IPRO_ATTRIBUTES_FOR_TEST} phb_set=BF						
${PHB_SET_EF_LOWER_CASE}	${IPRO_ATTRIBUTES_FOR_TEST} phb_set=ef,af4,af3						
${PHB_SET_ALL_LOWER_CASE}	${IPRO_ATTRIBUTES_FOR_TEST} phb_set=all						
${SAME_IPRO_INSTANCE_WITH_SAME_ATTRIBUTES}	${NORMAL_IPRO_ATTRIBUTES}						
${SAME_IPRO_INSTANCE_WITH_DIFFERENT_ATTRIBUTES}	${NORMAL_IPRO_ATTRIBUTES} phb_set=EF,AF4,AF3,AF2						
${NONE_EXIST_IPRO_INSTANCE}	ipbr_id=${IPBR_ID_4082} iface=${IFACE_NAME} owner=${OWNER_NAME_1} ip_address=${TEST_IP_ADDR_1}						
${IPROS_UNDER_SAME_IPBR_WITH_SCHEDULER_TYPE_IS_NOT_NONE}	ipbr_id=${IPBR_ID_4080} iface=${IFACE_NAME} owner=${OWNER_NAME_2} ip_address=${TEST_IP_ADDR_2}						
${TEST_IP_ADDR_SIGIUB}	%{IUB_FGW_IP2_0}						
${INVALID_OWNER_RG_NAME_1}	ipbr_id=${IPBR_ID_4081} iface=ethtest20 owner=/QNIUB-0 ip_address=${TEST_IP_ADDR_SIGIUB} ipbr_id=${IPBR_ID_4081}						
${VALID_PARAMETER_WITH_PART_VALID_PHB}	ipbr_id=${IPBR_ID_4081} iface=${IFACE_NAME} owner=${OWNER_NAME_2} ip_address=${TEST_IP_ADDR_2} phb_set=AF2,AF1,BE						
${INVALID_OWNER_1}	/QNIUB-0						
${IPRO_ALL_PARA_INFO}	ipbr_id=${IPBR_ID_4081} iface=${IFACE_NAME} owner=${OWNER_NAME_2} ip_address=${TEST_IP_ADDR_2} phb_set=EF,AF4,AF3,AF2,AF1,BE						
							
*Test Case*							
Reserve IPRO with valid and invalid parameters	[Tags]	FRS_ID-PCM_100201_26_R2222	EFS_ID-RNC_EFS_2222_376	EFSS_ID-RNC_EFS_2222_502	EFS_ID-RNC_EFS_2222_377	FRS_ID-PCM_100201_44_R1709	EFS_ID-RNC_EFS_1709_329
	...	EFS_ID-RNC_EFS_1709_344	FRS_ID-PCM_100201_9_R1709	EFS_ID-TT_SFS_IPTransport.2990	FRS_ID-PCM_100201_54_0000	FRS_ID-PCM_100201_9_R1709	PRS_ID-PRS_4225
	...	PRS_ID-PRS_4221					
	[Template]	Reserve IPRO and check result					
	${SAME_IPRO_INSTANCE_WITH_SAME_ATTRIBUTES}	FAIL	IPRO_EXIST				
	${SAME_IPRO_INSTANCE_WITH_DIFFERENT_ATTRIBUTES}	FAIL	IPRO_EXIST				
	${NONE_EXSIT_VRF}	FAIL	INVALID_PARAM	${VRF_NAME}	vrf		
	${PHB_SET_DO_NOT_CONTAIN_BE}	FAIL	BE_OR_EF_MISSING	AF2,AF1			
	${PHB_SET_HAS_DUPLICATE_VALUE}	FAIL	PHB_DUPLICATE	EF,AF4,AF4			
	${PHB_SET_IS_NOT_CONTINOUS}	FAIL	PHB_NOT_CONSECUTIVE	EF,AF4,AF2			
	${PHB_SET_HAS_INVALID_VALUE_BF}	FAIL	PHB_INVALID_STR	BF			
	${IPBR_ID_NOT_EXIST}	FAIL	IPBR_NOT_EXIST	${IPBR_ID_4082}			
	${IPROS_UNDER_SAME_IPBR_WITH_SCHEDULER_TYPE_IS_NOT_NONE}	FAIL	SECHEDULER_LIMIT				
	${INVALID_OWNER_RG_NAME}	FAIL	INVALID_PARAM	${INVALID_OWNER}	owner		
	${INVALID_OWNER_RG_NAME_1}	FAIL	INVALID_PARAM	${INVALID_OWNER_1}	owner		
	${PHB_SET_ALL_LOWER_CASE}	FAIL	PHB_REG_NOT_MATCH	all	phb-set		
	${PHB_SET_EF_LOWER_CASE}	FAIL	PHB_REG_NOT_MATCH	ef,af4,af3	phb-set		
	${VALID_PARAMETER_WITH_PART_VALID_PHB}	SUCCESS				${VALID_PARAMETER_WITH_PART_VALID_PHB}	
	${IPRO_ATTRIBUTES_FOR_TEST}	SUCCESS				${IPRO_ATTRIBUTES_FOR_TEST}	
							
*Keyword*							
Reserve IPRO and check result	[Arguments]	${attr_str}	${expect_result}	${error_type}=	${error_value}=	${error_param}=	${ipro_info}=
	${result}	add IPRO with attributes	${attr_str}				
	check IPRO operation result	${result}	${expect_result}	ADD	${error_type}	${error_param}	${error_value}
	Run Keyword if	'${result['result']}' == 'Success'	compare IPRO information and delete IPRO	${ipro_info}			
							
Reserve IP Address, IPBR and IPRO as test resource	add network address	${OWNER_NAME_1}	${IFACE_NAME}	${TEST_IP_ADDR_1}	dedicated		
	add network address	${OWNER_NAME_2}	${IFACE_NAME}	${TEST_IP_ADDR_2}	dedicated		
	${result}	add IP based route with attributes	${TEST_BASE_IPBR_1}				
	should be equal	${result['result']}	Success				
	${result}	add IP based route with attributes	${TEST_BASE_IPBR_2}				
	should be equal	${result['result']}	Success				
	${result}	add IPRO with attributes	${NORMAL_IPRO_ATTRIBUTES}				
	Should be equal	${result['result']}	Success				
							
Release test resource	${result}	Delete IPRO with attributes	${NORMAL_IPRO_ATTRIBUTES}				
	Should be equal	${result['IPRO Delete']}	Success				
	Run Keyword And Ignore Error 	Delete IPRO with attributes	${IPRO_ATTRIBUTES_FOR_TEST}				
	Delete network address	${OWNER_NAME_1}	${IFACE_NAME}	${TEST_IP_ADDR_1}	dedicated		
	Delete network address	${OWNER_NAME_2}	${IFACE_NAME}	${TEST_IP_ADDR_2}	dedicated		
	${result}	Delete IP based route with attributes	${TEST_BASE_IPBR_1}				
	Should be equal	${result['result']}	Success				
	${result}	Delete IP based route with attributes	${TEST_BASE_IPBR_2}				
	Should be equal	${result['result']}	Success				
							
Connect to target hardware and reserve test resource	Connect to target hardware						
	Reserve IP Address, IPBR and IPRO as test resource						
							
Release test resource and disconnect from target hardware	Release test resource						
	Disconnect from target hardware						
							
compare IPRO information and delete IPRO	[Arguments]	${ipro_info}					
	${result}	show IPRO with attributes	${IPRO_ATTRIBUTES_FOR_TEST}				
	compare ipro attribute with expect string	${result}	${ipro_info}				
	${result}	Delete IPRO with attributes	${IPRO_ATTRIBUTES_FOR_TEST}				
	Should be equal	${result['IPRO Delete']}	Success				
